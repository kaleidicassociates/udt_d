//module kaleidic.api.udtwrap;
import core.time:Duration,msecs;
import std.string:toStringz,fromStringz;
import std.conv:to;
import std.exception:enforce;
import std.format:format;
static import std.socket;
import std.socket:AddressInfoFlags,SocketType,Address,InternetAddress,Socket,ProtocolType;
import std.stdio:File;
import std.typecons:tuple;
import std.traits : isArray;
#include "udtc.h"
#include <arpa/inet.h>

mixin dpp.EnumD!("SocketType",__socket_type,"SOCK_");
mixin dpp.EnumD!("Status",UDT_UDTSTATUS,"UDT_");
mixin dpp.EnumD!("Option",UDT_UDTOpt,"UDT_");
mixin dpp.EnumD!("ErrNo",UDT_ERRNO,"UDT_");
mixin dpp.EnumD!("EpollOption",UDT_EPOLLOpt,"UDT_UDT_");

alias AddressFamily = typeof(AF_INET);


struct addrinfo
{
  int ai_flags;                 /* Input flags.  */
  int ai_family;                /* Protocol family for socket.  */
  int ai_socktype;              /* Socket type.  */
  int ai_protocol;              /* Protocol for socket.  */
  socklen_t ai_addrlen;         /* Length of socket address.  */
  sockaddr *ai_addr;     /* Socket address for socket.  */
  char *ai_canonname;           /* Canonical name for service location.  */
  addrinfo *ai_next;     /* Pointer to next in list.  */
}





struct SocketAddressStorage {
	sockaddr_storage handle;
	private enum NI_MAXHOST = 200;
	private enum NI_MAXSERV = 200;
	private char[NI_MAXHOST] clienthost;
	private char[NI_MAXSERV] clientservice;

	@property char[] clientHost() {
		return fromStringz(this.clienthost.ptr);
	}

	@property char[] clientService() {
		return fromStringz(this.clientservice.ptr);
	}

	void getNameInfo() {
		import std.traits: Parameters;
		version(Windows) {
			import core.sys.windows.winsock2: getnameinfo;
			alias gai_strerror = gai_strerrorA;
		} else
			  import core.sys.posix.netdb: getnameinfo, gai_strerror;

		int rslt = getnameinfo(cast(Parameters!getnameinfo[0])&this.handle,
							   this.handle.sizeof.to!int,
							   this.clienthost.ptr,
							   this.clienthost.length.to!int,
							   this.clientservice.ptr,
							   this.clientservice.length.to!int,
			AddressInfoFlags.NUMERICHOST);

        version(Windows)
            enforce(rslt == 0, "getnameinfo error");
        else
            enforce(rslt == 0,
                    format(" getnameinfo error: %s", gai_strerror(rslt).fromStringz()));
	}
}

struct SocketAddressIn
{
	sockaddr_in handle = sockaddr_in(AF_INET,9000,in_addr(INADDR_ANY));
	alias handle this;

	this(sa_family_t family, ushort port, string address= null)
	{
		if (address.length ==0)
		{
			this.handle = sockaddr_in(family,port,in_addr(INADDR_ANY));
		}
		else
		{
			this.handle=sockaddr_in(family,port);
			inet_pton(family,address.toStringz,&this.sin_addr);
		}
	}
}

private T getSocketOptionHelper(T)(UDTSOCKET socket, UDT_UDTOpt option)
{
	T ret;
	uint retSize=ret.sizeof;
	int result = getsockopt(socket,0,option,cast(void*)&ret,&retSize);
	enforce(option == Option.UDT_UDT_RCVDATA || option == Option.UDT_UDT_SNDDATA || result != UDT_ERROR, format!"error (%s) getting socket option %s for %s: %s"(result,option,socket,getLastError()));
	return ret;
}

private void setSocketOptionHelper(T)(UDTSOCKET socket, UDT_UDTOpt option, T value)
{
	T temp = value;
	int result = setsockopt(socket,0,option,cast(void*)&temp,temp.sizeof.to!int);
	enforce(result != UDT_ERROR, format!"error (%s) setting socket option %s for %s: %s"(result,option,socket,getLastError()));
}
/*
   int getsockopt(int, int, int, void*, socklen_t*) @nogc nothrow;
    int setsockopt(int, int, int, const(void)*, socklen_t) @nogc nothrow;
    int udt_getsockopt(UDTSOCKET, int, int, void*, int*) @nogc nothrow;
    int udt_setsockopt(UDTSOCKET, int, int, const(void)*, int) @nogc nothrow;
*/

final class SocketOptions
{
	UdtSocket socket;

	this(UdtSocket socket)
	{
		this.socket = socket;
	}

	int maximumPacketSize()
	{
    		return getSocketOptionHelper!int(socket.handle,Option.UDT_UDT_MSS);
	}

	void maximumPacketSize(int size)
	{
		setSocketOptionHelper!int(socket.handle,Option.UDT_UDT_MSS,size);
	}

	bool blockingSending()
	{
		return getSocketOptionHelper!bool(socket.handle,Option.UDT_UDT_SNDSYN);
	}

	void blockingSending(bool mode)
	{
		setSocketOptionHelper!bool(socket.handle,Option.UDT_UDT_SNDSYN,mode);
	}

	bool blockingReceiving()
	{
		return getSocketOptionHelper!bool(socket.handle,Option.UDT_UDT_RCVSYN);
	}

	void blockingReceiving(bool mode)
	{
		setSocketOptionHelper!bool(socket.handle,Option.UDT_UDT_RCVSYN,mode);
	}

	int maximumWindowSize()
	{
		return getSocketOptionHelper!int(socket.handle,Option.UDT_UDT_FC);
	}

	void maximumWindowSize(int size)
	{
		setSocketOptionHelper!int(socket.handle,Option.UDT_UDT_FC,size);
	}

	int udtSenderBufferSize()
	{
		return getSocketOptionHelper!int(socket.handle,Option.UDT_UDT_SNDBUF);
	}

	void udtSenderBufferSize(int size)
	{
		setSocketOptionHelper!int(socket.handle,Option.UDT_UDT_SNDBUF,size);
	}

	int udtReceiverBufferSize()
	{
		return getSocketOptionHelper!int(socket.handle,Option.UDT_UDT_RCVBUF);
	}

	void udtReceiverBufferSize(int size)
	{
		setSocketOptionHelper!int(socket.handle,Option.UDT_UDT_RCVBUF,size);
	}

	int udpSenderBufferSize()
	{
		return getSocketOptionHelper!int(socket.handle,Option.UDT_UDP_SNDBUF);
	}

	void udpSenderBufferSize(int size)
	{
		setSocketOptionHelper!int(socket.handle,Option.UDT_UDP_SNDBUF,size);
	}

	int udpReceiverBufferSize()
	{
		return getSocketOptionHelper!int(socket.handle,Option.UDT_UDP_RCVBUF);
	}

	void udpReceiverBufferSize(int size)
	{
		setSocketOptionHelper!int(socket.handle,Option.UDT_UDP_RCVBUF,size);
	}

	linger lingerTime()
	{
		linger result = getSocketOptionHelper!linger(socket.handle,Option.UDT_UDT_LINGER);
		return result;
	}

	void lingerTime(linger lingerTime)
	{
		setSocketOptionHelper!linger(socket.handle,Option.UDT_UDT_LINGER,lingerTime);
	}

	bool enableRendezVous()
	{
		return getSocketOptionHelper!bool(socket.handle,Option.UDT_UDT_RENDEZVOUS);
	}

	void enableRendezVous(bool enable)
	{
		setSocketOptionHelper!bool(socket.handle,Option.UDT_UDT_RENDEZVOUS,enable);
	}

	//void* congestionControlAlgorithm;

	Duration sendCallTimeOut()
	{
		return getSocketOptionHelper!int(socket.handle,Option.UDT_UDT_SNDTIMEO).msecs();
	}

	void sendCallTimeOut(Duration dur)
	{
		setSocketOptionHelper!int(socket.handle,Option.UDT_UDT_SNDTIMEO,dur.total!"msecs".to!int);
	}

	Duration receiveCallTimeout()
	{
		return getSocketOptionHelper!int(socket.handle,Option.UDT_UDT_RCVTIMEO).msecs();
	}

	void receiveCallTimeOut(Duration dur)
	{
		setSocketOptionHelper!int(socket.handle,Option.UDT_UDT_RCVTIMEO,dur.total!"msecs".to!int);
	}

	bool reuseAddress()
	{
		return 	getSocketOptionHelper!bool(socket.handle,UDT_UDT_REUSEADDR);
	}

	void reuseAddress(bool reuse)
	{
		setSocketOptionHelper!bool(socket.handle,Option.UDT_UDT_REUSEADDR,reuse);
	}

	long maximumBytesPerSecondPerConnection()
	{
		return getSocketOptionHelper!long(socket.handle,Option.UDT_UDT_MAXBW);
	}

	void maximumBytesPerSecondPerConnection(long bw)
	{
		setSocketOptionHelper!long(socket.handle,Option.UDT_UDT_MAXBW,bw);
	}

	int state()
	{
		return getSocketOptionHelper!int(socket.handle,Option.UDT_UDT_STATE);
	}

	int epollEvents()
	{
		return getSocketOptionHelper!int(socket.handle,Option.UDT_UDT_EVENT);
	}

	int sizePendingDataSend()
	{
		return getSocketOptionHelper!int(socket.handle,Option.UDT_UDT_SNDDATA);
	}

	int sizePendingDataReceive()
	{
		return getSocketOptionHelper!int(socket.handle,Option.UDT_UDT_RCVDATA);
	}
}

shared static this()
{
	udt_startup();
}

shared static ~this()
{
	udt_cleanup();
}
/*
    int select(int, fd_set*, fd_set*, fd_set*, timeval*) @nogc nothrow;

    int shutdown(int, int) @nogc nothrow;
    int sockatmark(int) @nogc nothrow;
    int isfdtype(int, int) @nogc nothrow;

    int udt_epoll_create() @nogc nothrow;
    int udt_epoll_add_usock(int, UDTSOCKET, const(int)*) @nogc nothrow;
    int udt_epoll_add_ssock(int, SYSSOCKET, const(int)*) @nogc nothrow;
    int udt_epoll_remove_ssock(int, SYSSOCKET) @nogc nothrow;
    int udt_epoll_wait2(int, UDTSOCKET*, int*, UDTSOCKET*, int*, int64_t, SYSSOCKET*, int*, SYSSOCKET*, int*) @nogc nothrow;
    int udt_epoll_release(int) @nogc nothrow;

    */
//alias getLastErrorCode = get_lasterror_code;
alias clearLastError = udt_clearlasterror;

string getLastError()
{
	return udt_getlasterror_desc().fromStringz().idup;
}

struct TraceInfo {
	UDT_TRACEINFO handle;
	alias handle this;
}


final class UdtSocket
{
	UDTSOCKET handle = -1;
	alias handle this;

	this(UDTSOCKET handle)
	{
		this.handle = handle;
	}

	int sizePendingDataSend()
	{
		return getSocketOptionHelper!int(handle,Option.UDT_UDT_SNDDATA);
	}

	int sizePendingDataReceive()
	{
		return getSocketOptionHelper!int(handle,Option.UDT_UDT_RCVDATA);
	}

	int state()
	{
		return udt_getsockstate(this.handle);
	}

	bool wouldBlock()
	{
		return (state() == UDT_EASYNCRCV);
	}

	bool isListening()
	{
		return state() == UDT_LISTENING;
	}
	
	bool isConnecting()
	{
		return state() == UDT_CONNECTING;
	}

	bool isAlive()
	{
		return state() == UDT_CONNECTED;
	}

	override string toString()
	{
		return format!"UDT socket %s; peerName %s; socketName %s"(this.handle,this.peerName(),this.socketName());
	}

	InternetAddress peerName()
	{
		sockaddr_in addr;
		int retLength;
		int result = udt_getpeername(this.handle,cast(sockaddr*)&addr,&retLength);
		enforce(result != UDT_ERROR, format!"unable to get peername info: %s"(getLastError()));
		return new InternetAddress(cast(std.socket.sockaddr_in)addr);
	}

	InternetAddress socketName()
	{
		sockaddr_in addr;
		int retLength;
		int result = udt_getsockname(this.handle,cast(sockaddr*)&addr,&retLength);
		return new InternetAddress(cast(std.socket.sockaddr_in)addr);
	}

	ref TraceInfo perfMon(ref TraceInfo info, bool clear = true)
	{
		int result = udt_perfmon(this.handle, &info.handle, clear);
		enforce(result != UDT_ERROR, format!"unable to get perfmon info: %s"(getLastError()));
		return info;
	}

	auto ref options()
	{
		return new SocketOptions(new UdtSocket(this.handle));
	}


	static auto create4(bool stream)
	{
		return create(std.socket.AddressFamily.INET,stream?SocketType.STREAM:SocketType.DGRAM,ProtocolType.RAW);
	}

	static auto create6(bool stream)
	{
		return create(std.socket.AddressFamily.INET6,stream?SocketType.STREAM:SocketType.DGRAM,ProtocolType.RAW);
	}

	static auto create(std.socket.AddressFamily addressFamily, SocketType socketType, int protocol)
	{
		int result = udt_socket(addressFamily.to!int, socketType.to!int, protocol);
		enforce(result != UDT_INVALID_SOCK, format!"unable to create UdtSocket: %s"(getLastError()));
		return new UdtSocket(result);
	}

	void bind(InternetAddress socketAddress)
	{
		int result = udt_bind(this.handle, cast(const(sockaddr)*)socketAddress.name, socketAddress.nameLen);
		enforce(result != UDT_ERROR, format!"unable to bind to %s: %s"(socketAddress,getLastError()));
	}

	void bind2(ref UdtSocket socket)
	{
		int result = udt_bind2(this.handle, socket.handle);
		enforce(result != UDT_ERROR, format!"unable to bind to UDP Socket %s: %s"(socket,getLastError()));
	}

	void connect(InternetAddress internetAddress)
	{
		int result = udt_connect(this.handle,cast(const(sockaddr)*) internetAddress.name, internetAddress.nameLen);
		enforce(result != UDT_ERROR, format!"unable to connect to %s: %s"(internetAddress,getLastError()));
	}

	void listen(int backlog)
	{
		enforce(udt_listen(this.handle,backlog) != UDT_ERROR,format!"unable to bind to listen to %s: %s"(backlog,getLastError()));
	}

	auto accept()
	{
		sockaddr_in addr;
		int addressLength;
		handle = udt_accept(this.handle, cast(sockaddr*) &addr,&addressLength);
		enforce(handle != UDT_INVALID_SOCK, format!"unable to accept : %s"(getLastError()));
		return tuple(new UdtSocket(handle),new InternetAddress(cast(std.socket.sockaddr_in)addr));
	}

	int receive(T)(scope ref T data) if(!isArray!T && !is(T == ubyte[])) {
		ubyte[] s = (cast(ubyte*)&data)[0 .. int.sizeof];
		return this.receive(s);
	}

	int receive(scope ubyte[] data) {
		int rcv_size;
		int var_size = int.sizeof;

		int opt = udt_getsockopt(this.handle, 0, UDT_UDTOpt.UDT_UDT_RCVDATA, &rcv_size, &var_size);
		if(opt == UDT_ERROR) {
			throw new Exception(format("getsockopt: %s", getLastError()));
		}

		int rs = udt_recv(this.handle, cast(char*)(data.ptr), to!int(data.length), 0);
		if(rs == UDT_ERROR) {
			throw new Exception(format("recv: %s", getLastError()));
		}

		return rs;
	}

	int send(T)(scope ref T data) @system {
		// As unsafe as it gets, the cost of dealing with C interfaces
		int result = this.send((cast(ubyte*)&data)[0 .. T.sizeof], 0);
		enforce(result != UDT_ERROR, format!"unable to send data of length %s:%s"(T.sizeof, getLastError()));
		return result;
	}

	auto send(scope ubyte[] data, int flags=0)
	{
		int result = udt_send(this.handle,cast(char*)data.ptr,data.length.to!int,flags);
		enforce(result != UDT_ERROR, format!"unable to send data of length %s: %s"(data.length,getLastError()));
		return result;
	}

	auto receiveMessage(scope const ubyte[] data)
	{
		int result = udt_recvmsg(this.handle,cast(char*)data.ptr,data.length.to!int);
		enforce(result != UDT_ERROR, format!"unable to receive message to buffer of length %s: %s"(data.length,getLastError()));
		return result;
	}

	auto sendMessage(scope ubyte[] data, int ttl, bool inOrder = true)
	{
		int result = udt_sendmsg(this.handle,cast(char*)data.ptr,data.length.to!int,ttl,inOrder ? 1:0);
		enforce(result != UDT_ERROR, format!"unable to send message of length %s: %s"(data.length,getLastError()));
		return result;
	}

	auto receiveFile(string filename, ref long offset, ulong size, int block = 7280000)
	{
		long result = udt_recvfile2(this.handle, filename.toStringz(), &offset, size, block);
		enforce(result != UDT_ERROR,
			format!"unable to receive data to buffer of length %s: %s"(size, getLastError())
		);
		return result;
	}

	auto sendFile(string filename, ref long offset, int block = 364000)
	{
		import std.file : getSize;
		import std.conv : to;

		const length = to!long(getSize(filename));
		long result = udt_sendfile2(this.handle, filename.toStringz(),
				&offset, length, block
			);
		enforce(result != UDT_ERROR, format!"unable to send file of length %s: %s"(length, getLastError()));
		return result;
	}


	void close()
	{
		int result = udt_close(this.handle);
		enforce(result != UDT_ERROR, format!"unable to close UdtSocket : %s"(getLastError()));
		this.handle=-1;
	}
	~this()
	{
		if (this.handle!=-1)
			this.close();
	}
}

void sendStream(Socket sourceSocket, UdtSocket targetSocket, size_t bufSize = 10_000_000)
{
	auto buf = new ubyte[bufSize];
	ptrdiff_t numBytes = 0, sentBytes = 0;
	while(sourceSocket.isAlive())
	{
		numBytes = sourceSocket.receive(cast(void[])buf);
		if (numBytes > 0)
		{
			sentBytes = targetSocket.send(buf[0..numBytes]);
			enforce(sentBytes == numBytes);
		}
	}
}

void sendStream(File sourceFile, UdtSocket socket, size_t bufSize = 10_000_000)
{
	foreach(ubyte[] buf; sourceFile.byChunk(new ubyte[bufSize]))
	{
		auto leftBuf = buf;
		while(leftBuf.length>0)
		{
			auto bytesSent = socket.send(leftBuf);
			leftBuf = leftBuf[bytesSent..$];
		}
	}
}

void receiveStream(UdtSocket sourceSocket, Socket targetSocket, size_t bufSize = 10_000_000)
{
	auto buf = new ubyte[bufSize];
	while(sourceSocket.isAlive())
	{
		int numBytes = udt_recv(sourceSocket.handle,cast(char*)(buf.ptr), to!int(buf.length), 0);
		if (numBytes <=0)
			continue;
		auto leftBuf = buf[0..numBytes];
		while(leftBuf.length > 0)
		{
			auto bytesSent = targetSocket.send(leftBuf);
			leftBuf = (bytesSent >=0) ? leftBuf[bytesSent .. $] : [];
		}
	}
}

void receiveStream(UdtSocket sourceSocket, File targetFile, size_t bufSize = 16384)
{
	auto buf = new ubyte[bufSize];
	while(sourceSocket.isAlive())
	{
		int numBytes = udt_recv(sourceSocket.handle,cast(char*)(buf.ptr), to!int(buf.length), 0);
		if (!sourceSocket.isAlive())
			break;
		if (numBytes > 0) targetFile.rawWrite(buf[0..numBytes]);
	}
}


